// admin.todo.js
// ==============================================================================
// üóÇÔ∏è Fichier unique combin√© : TODO Admin + Observations + √âtat d‚Äôimplantation
// Derni√®re m√†j : 2025-08-20
// Contexte : backend refactoris√© (MVC), s√©curisation wishlist par JWT, correctif checkout,
//            retrait du routeur productDetails fant√¥me, logs & error handler en place.
// ==============================================================================

// ==============================================================================
// üß© ROUTES ADMIN √Ä IMPL√âMENTER
// ------------------------------------------------------------------------------
// üîê Middlewares recommand√©s :
//   - verifyToken()  ‚Üí authentification JWT (DEJA EN PLACE)
//   - verifyAdmin()  ‚Üí autorisation admin (EXISTE, √Ä BRANCHER)
// √âTAT : verifyAdmin.js est pr√©sent mais pas encore appliqu√© aux routes admin.
//        Ajouter colonne `role` dans la table `customers` (default: 'user') si absent.
//        Puis appliquer : verifyToken, verifyAdmin sur toutes les routes /admin/*
// ==============================================================================

// üßæ Commandes
// ----------------------------------------
/**
 * GET    /admin/orders              - Liste des commandes
 * GET    /admin/orders/:id         - D√©tail d'une commande
 * GET    /admin/orders/:id/items   - Items d'une commande
 * PATCH  /admin/orders/:id/status  - Modifier le statut de commande
 * DELETE /admin/orders/:id         - Supprimer une commande (rarement utile)
 *
 * OBSERVATIONS :
 *  - La logique Stripe/checkout est en place (webhook, cr√©ation/maj d‚Äôorders) mais
 *    il manque un module d‚ÄôADMIN (orderAdminController + orderService + orderModel).
 *  - Pr√©voir filtres (status, date, email client), pagination, tri.
 *  - Journaliser les changements de statut (table order_status_history si pr√©sente).
 */

// üëï Produits
// ----------------------------------------
/**
 * GET    /admin/products           - Liste des produits
 * GET    /admin/products/:id      - D√©tail d‚Äôun produit (avec variantes m√™me invisibles)
 * POST   /admin/products          - Ajouter un nouveau produit
 * PATCH  /admin/products/:id      - Modifier un produit
 * DELETE /admin/products/:id      - Supprimer un produit
 *
 * OBSERVATIONS :
 *  - Le productsController public sert la boutique (produits visibles).
 *  - Cr√©er un productsAdminController s√©par√© pour √©viter la confusion public/admin
 *    (inclure produits non visibles, brouillons, champs internes).
 *  - Ajouter validations (prix ‚â• 0, nom requis, images/variantes coh√©rentes).
 */

// üßµ Variantes
// ----------------------------------------
/**
 * GET    /admin/variants                      - Liste de toutes les variantes
 * GET    /admin/products/:id/variants         - Variantes pour un produit
 * PATCH  /admin/variants/:id                  - Modifier une variante
 * POST   /admin/variants/import               - Importer depuis Printful
 *
 * OBSERVATIONS :
 *  - La sync Printful existe (syncVariants.js + importPrintful.js).
 *  - Encapsuler en service (printfulService est d√©j√† pr√©sent) et exposer un contr√¥leur admin
 *    pour lancer un import, voir les anomalies (variants sans image/size/price).
 */

// üõçÔ∏è Promotions
// ----------------------------------------
/**
 * GET    /admin/discount-codes      - Liste des codes promo
 * POST   /admin/discount-codes      - Cr√©er un code promo
 * DELETE /admin/discount-codes/:id  - Supprimer un code promo
 *
 * OBSERVATIONS :
 *  - √Ä impl√©menter (model/service/controller + validations : unicit√©, date de validit√©,
 *    type de remise %/montant, champ is_active plut√¥t que suppression dure).
 */

// üë§ Clients
// ----------------------------------------
/**
 * GET    /admin/customers             - Liste des clients
 * GET    /admin/customers/:id         - D√©tails d‚Äôun client
 * GET    /admin/customers/:id/orders  - Commandes d‚Äôun client
 *
 * OBSERVATIONS :
 *  - Auth en place (inscription/connexion/refresh). Manque vue admin lecture seule
 *    avec pagination/filtre (email, date cr√©ation) et lien vers commandes du client.
 */

// ‚öôÔ∏è Autres outils utiles
// ----------------------------------------
/**
 * GET    /admin/logs/cron                    - Logs des t√¢ches planifi√©es
 * GET    /admin/errors/api                   - Logs erreurs API
 * GET    /admin/abandoned-carts              - Voir les paniers abandonn√©s
 * POST   /admin/resend-confirmation/:orderId - R√©envoyer la confirmation
 *
 * OBSERVATIONS :
 *  - Abandoned carts : logique amorc√©e c√¥t√© front (log-abandoned-cart).
 *    Cr√©er une table si besoin + une vue admin pour relances (export CSV).
 *  - Les utils logger existent : exposer une liste pagin√©e & filtrable c√¥t√© admin.
 */

// üîß T√¢ches techniques (non publiques)
///---------------------------------------
/**
 * POST /admin/force-sync     - Forcer la sync Printful ‚Üí DB
 * POST /admin/clear-cache    - Vider le cache local (si utilis√©)
 *
 * OBSERVATIONS :
 *  - Forcer la sync en appelant un service d√©di√© (pas directement un script).
 *  - Prot√©ger strictement par verifyToken + verifyAdmin.
 */

// ==============================================================================
// üîê AUTHENTIFICATION JWT ‚Äî √âTAT & ACTIONS
// ------------------------------------------------------------------------------
// Objectif : Prot√©ger les routes sensibles et g√©rer le cycle complet d'authentification
// √âTAT ACTUEL (2025-08-20) :
//   ‚úÖ Middleware verifyToken en place (middlewares/authMiddleware.js).
//   ‚úÖ Appliqu√© sur /api/create-checkout-session.
//   ‚úÖ Wishlist s√©curis√©e (routes + contr√¥leur comparent req.user.id).
//   ‚úÖ Endpoint /api/auth/refresh-token pr√©sent.
//   ‚¨ú Rotation des refresh tokens + nettoyage p√©riodique.
//   ‚¨ú Application syst√©matique sur toutes les routes sensibles (/api/orders, /api/user/profile, /admin/*).
// ==============================================================================

/* 1. Middleware de v√©rification de l'accessToken */
// - [FAIT] Fichier `middlewares/authMiddleware.js`
// - [FAIT] Fonction `verifyToken(req, res, next)`
//       ‚Üí V√©rifie le header Authorization: Bearer <token>
//       ‚Üí jwt.verify avec `process.env.JWT_SECRET`
//       ‚Üí Si valide : req.user = payload, next()
//       ‚Üí Sinon : return 401 Unauthorized

/* 2. Appliquer le middleware aux routes sensibles */
// - [EN COURS] Routes prot√©g√©es :
//       ‚Üí `/api/wishlist` ‚úÖ (et contr√¥leur v√©rifie l‚Äôidentit√©)
//       ‚Üí `/api/create-checkout-session` ‚úÖ
//       ‚Üí `/admin/*` ‚¨ú (√† faire syst√©matiquement)
//       ‚Üí `/api/orders` (lecture des commandes personnelles) ‚¨ú
//       ‚Üí `/api/user/profile` (si applicable) ‚¨ú

/* 3. Rafra√Æchissement automatique de l'accessToken */
// - [TODO Front] : Intercepter 401 ‚Üí appeler `/api/auth/refresh-token` avec refreshToken
//                  ‚Üí stocker le nouveau accessToken ‚Üí relancer la requ√™te √©chou√©e
// - [TODO Back]  : √Ä chaque refresh, g√©n√©rer un nouveau refreshToken et invalider l‚Äôancien

/* 4. S√©curit√© avanc√©e (recommand√©) */
// - [DB] Ajouter `created_at` dans `refresh_tokens` (si absent)
// - [Rotation] Nouveau refreshToken √† chaque refresh, suppression de l‚Äôancien
// - [Cron] Nettoyer les tokens expir√©s (node-cron d√©j√† utilis√© dans le projet)

/* 5. Tests √† faire (Postman) */
// - [ ] Acc√®s route priv√©e sans token ‚Üí 401
// - [ ] Acc√®s avec token expir√© ‚Üí 401 ‚Üí refresh ‚Üí nouveau token ‚Üí succ√®s
// - [ ] Logout : suppression du refreshToken ‚Üí refresh impossible (403/401 attendu)

// ==============================================================================
// üßØ MIDDLEWARE GLOBAL DE GESTION DES ERREURS ‚Äî ‚úÖ FAIT
// ------------------------------------------------------------------------------
// Objectif : Centraliser le traitement des erreurs serveur et les logs associ√©s.
//
/* 1. Cr√©ation */
// ‚úÖ Fichier : `middlewares/errorHandler.js`
// ‚úÖ Fonction `errorHandler(err, req, res, next)`
// ‚úÖ Utilise `logError()` (source 'global') et retourne 500 + message g√©n√©rique

/* 2. Int√©gration dans le serveur */
// ‚úÖ `app.use(errorHandler)` ajout√© dans `server.js` (tout en bas)

/* 3. Tests */
// ‚úÖ Erreur volontaire captur√©e (OK)

/* 4. Bonus */
// ‚¨ú Ajouter en PROD un alerting (email/webhook)
// ‚¨ú Afficher stack trace uniquement en dev

// ==============================================================================
// üëë MIDDLEWARE D‚ÄôADMINISTRATION ‚Äî ‚ö†Ô∏è √Ä BRANCHER
// ------------------------------------------------------------------------------
// Objectif : Restreindre les routes /admin/* aux comptes admin.
//
/* 1. Cr√©ation */
// ‚úÖ Fichier : `middlewares/verifyAdmin.js`
// ‚úÖ `verifyAdmin(req, res, next)` : refuse si `req.user.role !== 'admin'`

/* 2. Utilisation */
// ‚¨ú Exemple : `router.get('/admin/orders', verifyToken, verifyAdmin, getAllOrders)`
// ‚¨ú Propager verifyAdmin sur toutes les routes admin

/* 3. (Facultatif) √âtendre la table `customers` */
// ‚¨ú Ajouter colonne `role` ENUM('user','admin') DEFAULT 'user'
// ‚¨ú Alimenter le payload JWT avec `role`

// ==============================================================================
// üì¶ STRUCTURE MVC / CLEANUP ‚Äî √âTAT
// ------------------------------------------------------------------------------
// Objectif : Controllers fins, services pour la logique m√©tier, models pour SQL.
//
/* √âtat au 2025-08-20 */
// ‚úÖ checkout refactoris√© (controller + services : stripeService/printfulService + orderModel)
// ‚úÖ wishlist refactoris√©e (controller + service + model) + s√©curis√©e JWT/identit√©
// ‚úÖ productsController public : liste + d√©tail (GET /api/products, GET /api/products/:id)
// ‚ö†Ô∏è `server.js` importait `productDetailsRoutes.js` (fant√¥me) ‚Üí √Ä SUPPRIMER (corrig√© dans nos notes)
// ‚¨ú Cr√©er modules ADMIN s√©par√©s : ordersAdminController, productsAdminController, variantsAdminController
// ‚¨ú Nettoyer fichiers obsol√®tes (ex : anciens *Model/*Service h√©rit√©s de l‚Äôancienne archi)
// ‚¨ú Centraliser logs (remplacer console.* par logInfo/logWarn/logError)

// ==============================================================================
// üîç POINTS DE CONTR√îLE G√âN√âRAUX √Ä SURVEILLER
// ------------------------------------------------------------------------------
// - ‚úÖ Coh√©rence des champs : `variant_id` (ID court Printful), `printful_variant_id` (ID interne 10 digits)
// - ‚¨ú Import Printful : garantir image/size/price sur chaque variante ; reporter anomalies en admin
// - ‚¨ú Panneau admin : tableau des erreurs d‚Äôimport (produits sans variantes visibles, images manquantes)
// - ‚¨ú Promotions : utiliser `is_active` plut√¥t que DELETE dur, garder historique
// - ‚¨ú Logs d‚Äôactions admin (modif produit, suppression, statut commande‚Ä¶)
// - ‚¨ú Logs de synchronisation Printful & erreurs API (vue admin filtrable)

// ==============================================================================
// üß≠ PRIORISATION SUGG√âR√âE (ADMIN)
// ------------------------------------------------------------------------------
// 1) DB : ajouter `role` √† `customers` (+ alimentation du payload JWT)
// 2) Appliquer verifyToken+verifyAdmin sur un premier module : /admin/orders (lecture seule)
// 3) Cr√©er orderAdminController + orderService (+ pagination/filtre/tri)
// 4) Cr√©er productsAdminController (liste compl√®te + show complet) sans casser le public
// 5) Encapsuler syncVariants dans un service et exposer /admin/variants/import
// 6) Ajouter panneau admin des anomalies d‚Äôimport (qualit√© de donn√©es)
//
// (Chaque √©tape est autonome et safe, pas de r√©gression c√¥t√© front public)

// ==============================================================================
// üß™ SNIPPETS D‚ÄôEXEMPLE (√Ä COLLER LORS DE L‚ÄôIMPL√âMENTATION)
// ------------------------------------------------------------------------------

// Exemple de route admin prot√©g√©e (orders)
/// routes/adminOrdersRoutes.js
/*
import express from 'express';
import { verifyToken } from '../middlewares/authMiddleware.js';
import { verifyAdmin } from '../middlewares/verifyAdmin.js';
import { listOrders, getOrder, getOrderItems, updateOrderStatus, deleteOrder } from '../controllers/admin/ordersAdminController.js';

const router = express.Router();

router.use(verifyToken, verifyAdmin);

router.get('/orders', listOrders);
router.get('/orders/:id', getOrder);
router.get('/orders/:id/items', getOrderItems);
router.patch('/orders/:id/status', updateOrderStatus);
router.delete('/orders/:id', deleteOrder);

export default router;
*/

// Exemple d‚Äôapplication dans server.js
/*
import adminOrdersRoutes from './routes/adminOrdersRoutes.js';
app.use('/admin', adminOrdersRoutes);
*/

// ==============================================================================
// üßæ HISTORIQUE DES OBSERVATIONS (2025-08-20)
// ------------------------------------------------------------------------------
// - Audit backend MVC : OK globalement. Correctifs propos√©s/appliqu√©s :
//   ‚Ä¢ Checkout : remplacer verifyAccessToken (inexistant) ‚Üí verifyToken (middlewares/authMiddleware.js)
//   ‚Ä¢ Wishlist : routes prot√©g√©es + contr√¥leur compare req.user.id et customerId
//   ‚Ä¢ Suppression de l‚Äôimport/routeur fant√¥me productDetailsRoutes.js (doublon avec /api/products/:id)
// - Notes ajout√©es dans NOTES.md (voir commandes du 2025-08-20).
// ==============================================================================
