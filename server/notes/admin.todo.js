// admin.todo.js
// ==============================================================================
// üóÇÔ∏è Fichier unique combin√© : TODO Admin + Observations + √âtat d‚Äôimplantation
// Derni√®re m√†j : 2025-09-22
// Contexte : backend refactoris√© (MVC), logger centralis√©, error handler global,
//            webhook Stripe en ‚Äústrict mode‚Äù, routes r√©organis√©es, cron externalis√©.
// ==============================================================================

// ==============================================================================
// üÜï CHANGEMENTS R√âCENTS (2025-09-22)
// ------------------------------------------------------------------------------
// ‚úÖ S√©paration bootstrap/app : server/app.js (Express) + server/server.js (listen)
// ‚úÖ Webhook Stripe isol√© avec raw body (routes/webhookRoutes.js)
// ‚úÖ Webhook ‚Äústrict‚Äù : r√©utilise UNIQUEMENT metadata (cart_items, shipping, order_id)
// ‚úÖ Checkout : on cr√©e la commande + items AVANT la session Stripe, puis on passe
//    client_reference_id + metadata (cart_items + shipping + order_id) au checkout.
// ‚úÖ Routes r√©organis√©es :
//    - /api/inventory/printful-stock/:variantId        (ex- /api/printful-stock/:id)
//    - /api/shipping/rates
//    - /api/admin/debug-orders
//    - /health
// ‚úÖ Cron externalis√© : jobs/index.js (schedulePrintfulSync + purgeLogs)
// ‚úÖ Logger centralis√© : utils/logger.js (logInfo/logWarn/logError) ‚Äî remplace console.*
// ‚úÖ Error handler global : middlewares/errorHandler.js (utilise logError + JSON propre)
// ‚úÖ Shipping rates : le controller accepte maintenant printful_variant_id (long) OU
//    variant_id (court). Mapping interne via product_variants.
// ‚úÖ Contrats front harmonis√©s : chaque item transporte BOTH ids
//    { id, variant_id (court), printful_variant_id (long), ... } ; shipping_rate = {name, rate}
// ==============================================================================

// ==============================================================================
// üß© ROUTES ADMIN √Ä IMPL√âMENTER
// ------------------------------------------------------------------------------
// üîê Middlewares recommand√©s :
//   - authProtect()  ‚Üí authentification JWT (EN PLACE, middlewares/authProtect.js)
//   - verifyAdmin()  ‚Üí autorisation admin (√Ä CR√âER si absent)
// √âTAT : routes/adminRoutes.js est branch√© sur /api/admin (contient /debug-orders).
//        √âtendre avec de vrais modules admin (orders/products/variants/logs).
//        DB : ajouter colonne `role` dans `customers` si absent.
//        JWT : inclure `role` dans le payload au login.
// ==============================================================================

// üßæ Commandes (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/orders              - Liste des commandes (filters: status, date, email)
 * GET    /api/admin/orders/:id         - D√©tails d'une commande
 * GET    /api/admin/orders/:id/items   - Items d'une commande
 * PATCH  /api/admin/orders/:id/status  - Modifier le statut
 * DELETE /api/admin/orders/:id         - (rare) supprimer
 *
 * OBSERVATIONS :
 *  - La logique Stripe/checkout+webhook est robuste. Reste l‚Äôinterface d‚Äôadmin.
 *  - Cr√©er: controllers/admin/ordersAdminController.js + services/admin/ordersAdminService.js
 *  - Journaliser les changements de statut (table order_status_history d√©j√† utilis√©e).
 */

// üëï Produits (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/products
 * GET    /api/admin/products/:id           (avec variantes, m√™me brouillons/invisibles)
 * POST   /api/admin/products
 * PATCH  /api/admin/products/:id
 * DELETE /api/admin/products/:id
 *
 * OBSERVATIONS :
 *  - Garder productsController public pour la boutique (visibles).
 *  - Cr√©er un productsAdminController distinct (champ is_visible, brouillons, etc.).
 *  - Validations: nom requis, prix ‚â• 0, coh√©rence variantes (size/color/price/image).
 */

// üßµ Variantes (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/variants
 * GET    /api/admin/products/:id/variants
 * PATCH  /api/admin/variants/:id
 * POST   /api/admin/variants/import        (d√©clenche une sync Printful ‚Üí DB)
 *
 * OBSERVATIONS :
 *  - La sync existe (syncVariants.js/importPrintful.js) + services/printfulService.js.
 *  - Exposer via un controller admin pour lancer un import et afficher les anomalies
 *    (variantes sans image/size/price, etc.).
 */

// üõçÔ∏è Promotions (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/discount-codes
 * POST   /api/admin/discount-codes
 * DELETE /api/admin/discount-codes/:id
 *
 * OBSERVATIONS :
 *  - √Ä impl√©menter (model/service/controller)
 *  - Validations : unicit√© code, date de validit√©, type (% / montant), `is_active` au lieu de delete dur.
 */

// üë§ Clients (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/customers
 * GET    /api/admin/customers/:id
 * GET    /api/admin/customers/:id/orders
 *
 * OBSERVATIONS :
 *  - Auth en place. Manque vues admin lecture seule (pagination + filtre email/date).
 *  - Lien de navigation vers commandes du client.
 */

// ‚öôÔ∏è Outils & maintenance (ADMIN)
// ----------------------------------------
/**
 * GET    /api/admin/logs/cron
 * GET    /api/admin/errors/api
 * GET    /api/admin/abandoned-carts
 * POST   /api/admin/resend-confirmation/:orderId
 *
 * OBSERVATIONS :
 *  - Abandoned carts : trace front amorc√©e (/api/log-abandoned-cart √† ajouter c√¥t√© back).
 *  - Exposer logs via utils/logger.js (pagin√©/filtr√©) + export CSV.
 */

// üîß T√¢ches techniques (ADMIN strict)
// ----------------------------------------
/**
 * POST /api/admin/force-sync     - Forcer la sync Printful ‚Üí DB
 * POST /api/admin/clear-cache    - Vider un cache local (si introduit)
 *
 * OBSERVATIONS :
 *  - Appeler des services d√©di√©s (pas des scripts ad hoc).
 *  - Prot√©ger par authProtect + verifyAdmin.
 */
// ==============================================================================

// ==============================================================================
// üîê AUTHENTIFICATION JWT ‚Äî √âTAT & ACTIONS
// ------------------------------------------------------------------------------
// Objectif : Prot√©ger les routes sensibles et g√©rer le cycle complet d'auth.
// √âTAT ACTUEL (2025-09-22) :
//   ‚úÖ Middleware authProtect en place (middlewares/authProtect.js)
//   ‚úÖ Appliqu√© sur /api/create-checkout-session
//   ‚úÖ Wishlist s√©curis√©e (routes + contr√¥leur comparent req.user.id)
//   ‚úÖ Endpoint /api/auth/refresh-token pr√©sent
//   ‚¨ú Rotation des refresh tokens + invalidation de l‚Äôancien √† chaque refresh
//   ‚¨ú Application syst√©matique sur /api/admin/*, /api/orders (compte), /api/user/profile
// ------------------------------------------------------------------------------

/* 1) Middleware de v√©rification du JWT */
// - Fichier : middlewares/authProtect.js
// - Comportement : lit Authorization: Bearer <token>, jwt.verify avec JWT_SECRET,
//   alimente req.user, sinon 401.

/* 2) Appliquer authProtect aux routes sensibles */
// - √Ä FAIRE : /api/admin/* (avec verifyAdmin), /api/orders, /api/user/profile

/* 3) Rafra√Æchissement accessToken */
// - Front : intercepter 401 ‚Üí POST /api/auth/refresh-token ‚Üí stocker nouveau token ‚Üí rejouer la req
// - Back  : √©mettre un nouveau refreshToken √† chaque refresh + invalider l‚Äôancien

/* 4) S√©curit√© avanc√©e */
// - DB : table refresh_tokens (si utilis√©e) avec created_at / expires_at
// - Cron : purge des tokens expir√©s (jobs/purgeLogs.js montre l‚Äôexemple d‚Äôun cron)
// ==============================================================================

// ==============================================================================
// üßØ MIDDLEWARE GLOBAL D‚ÄôERREURS ‚Äî ‚úÖ EN PLACE
// ------------------------------------------------------------------------------
// Fichier : middlewares/errorHandler.js
// - Utilise logError(source='global') et renvoie JSON propre (status 500 par d√©faut).
// - En dev, on peut inclure stack; en prod, masquer la stack.
// - Penser √† next(err) dans les controllers pour centraliser ici.
// ==============================================================================

// ==============================================================================
// üëë MIDDLEWARE D‚ÄôADMINISTRATION ‚Äî ‚ö†Ô∏è √Ä BRANCHER
// ------------------------------------------------------------------------------
// Objectif : limiter /api/admin/* aux comptes admin.
//
// 1) verifyAdmin.js (√† cr√©er si absent)
//    export const verifyAdmin = (req,res,next) => req.user?.role === 'admin' ? next() : res.status(403).json({message:'Forbidden'});
//
// 2) DB : ajouter `role` √† `customers` + inclure `role` dans le JWT au login
//    SQL exemple :
//      ALTER TABLE customers ADD COLUMN role ENUM('user','admin') NOT NULL DEFAULT 'user';
// ==============================================================================

// ==============================================================================
// üì¶ STRUCTURE MVC / CLEANUP ‚Äî √âTAT
// ------------------------------------------------------------------------------
// Objectif : Controllers fins, services pour la logique m√©tier, models pour SQL.
// √âTAT (2025-09-22) :
// ‚úÖ app.js : d√©clare toutes les routes + errorHandler + startCronJobs()
// ‚úÖ server.js : bootstrap (listen) + logInfo de d√©marrage
// ‚úÖ routes/* : webhookRoutes, inventoryRoutes, shippingRoutes, adminRoutes, etc.
// ‚úÖ controllers/* : inventoryController, shippingController, adminController (debug), webhookController, ...
// ‚úÖ services/* : printfulService, orderService, orderSyncService, stripeService
// ‚úÖ jobs/* : printfulSync.js, purgeLogs.js, index.js (agr√®ge les crons)
// ‚úÖ utils/logger.js : remplace console.*, stockage DB + console en dev
// ‚ö†Ô∏è √Ä faire : modules ADMIN d√©di√©s (orders/products/variants/logs) + verifyAdmin partout
// üóëÔ∏è √Ä surveiller : supprimer anciens fichiers obsol√®tes au fil des ajouts
// ==============================================================================

// ==============================================================================
// üîç POINTS DE CONTR√îLE & CONTRATS (BACK/FONT)
// ------------------------------------------------------------------------------
// ‚úÖ Identifiants de variante :
//    - variant_id  = ID COURT (Printful ‚Äúcatalog variant id‚Äù / notre champ variant_id)
//    - printful_variant_id = ID LONG (10 chiffres, ‚Äúsync variant id‚Äù c√¥t√© Printful)
//    - Les items (front ‚Üí back) transportent les deux lorsqu‚Äôils sont connus.
// ‚úÖ Shipping rates (/api/shipping/rates) : accepte items avec EITHER
//    {variant_id} OU {printful_variant_id}; le serveur traduit au besoin.
// ‚úÖ Endpoints front (changelog) :
//    - /api/printful-stock/:id           ‚Üí  /api/inventory/printful-stock/:variantId
//    - /api/shippingRates                ‚Üí  /api/shipping/rates
//    - /api/admin/debug-orders           (ajout√©)
//    - /health                           (ajout√©)
// ‚úÖ Checkout payload :
//    items: [{ id, variant_id, printful_variant_id, name, price, image, quantity, color, size }]
//    shipping_rate: { name, rate } uniquement
//    (le serveur reconstruit metadata pour le webhook)
// ==============================================================================

// ==============================================================================
// ‚ûï AJOUTS QUALIT√â DE VIE (√Ä FAIRE / √Ä V√âRIFIER)
// ------------------------------------------------------------------------------

// 1) Paniers abandonn√©s (endpoint + table)
// ----------------------------------------
// - Route: POST /api/log-abandoned-cart
//   Payload minimal: { customer_email, cart_contents (JSON string), user_agent?, referer? }
// - Table SQL (exemple):
//   CREATE TABLE IF NOT EXISTS abandoned_carts (
//     id INT AUTO_INCREMENT PRIMARY KEY,
//     email VARCHAR(255) NOT NULL,
//     cart_json JSON NOT NULL,
//     user_agent VARCHAR(512) NULL,
//     referer VARCHAR(512) NULL,
//     created_at DATETIME DEFAULT CURRENT_TIMESTAMP
//   ) ENGINE=InnoDB;
// - Admin: GET /api/admin/abandoned-carts (pagin√© + filtre email/date) + export CSV.

// 2) Index DB recommand√©s (perf & int√©grit√©)
// ------------------------------------------
// - orders                : INDEX (status), INDEX (customer_email), INDEX (created_at)
// - order_items           : INDEX (order_id), INDEX (printful_variant_id), INDEX (variant_id)
// - product_variants      : UNIQUE (variant_id), UNIQUE (printful_variant_id)
// - stripe_events         : PRIMARY KEY(id) (d√©j√† OK)
// - logs (si table)       : INDEX (level), INDEX (created_at)
// - abandoned_carts       : INDEX (email), INDEX (created_at)

// 3) Stabilit√© API externes (rate-limit / timeouts / retry)
// ---------------------------------------------------------
// - Ajouter un rate-limit sur /api/shipping/rates et /api/inventory/* (ex: 20 req/min/IP).
// - Config Axios par d√©faut: timeout ~10s, retry/backoff l√©ger (429/5xx).
// - Circuit breaker (optionnel) si Printful r√©pond en erreur persistante.

// 4) Hardening & production
// -------------------------
// - app.use(helmet()) et app.use(compression()) dans app.js.
// - CORS strict en prod (origin = FRONTEND_URL) au lieu de "*".
// - Endpoint /readiness qui ping la DB (SELECT 1) en plus de /health.
// - D√©sactiver stack trace dans les r√©ponses en prod (errorHandler).

// 5) Observabilit√© (corr√©lation & niveaux de logs)
// ------------------------------------------------
// - G√©n√©rer un requestId (header x-request-id) par requ√™te ‚Üí inclure dans logInfo/logError.
// - Piloter le niveau de log via variable d‚Äôenv LOG_LEVEL (debug/info/warn/error).
// - Journaux d‚Äôacc√®s (morgan) en dev uniquement (optionnel).

// 6) .env.example (tenir √† jour dans le repo)
// -------------------------------------------
// PORT=4242
// FRONTEND_URL=http://localhost:3000
//
// # Stripe
// STRIPE_SECRET_KEY=sk_test_xxx
// STRIPE_WEBHOOK_SECRET=whsec_xxx
//
// # Printful
// PRINTFUL_API_KEY=pf_xxx
// PRINTFUL_STORE_ID=1234567
// PRINTFUL_AUTOMATIC_ORDER=false
//
// # DB
// DB_HOST=localhost
// DB_USER=root
// DB_PASSWORD=yourpass
// DB_NAME=shop
//
// # Cron (exemples)
// CRON_STATUS_SCHEDULE=0 2 * * *
// CRON_PURGE_LOG_SCHEDULE=0 0 * * *
// LOG_RETENTION_DAYS=7
//
// NODE_ENV=development
// LOG_LEVEL=info
// ==============================================================================

// ==============================================================================
// üß≠ PRIORISATION (ADMIN) ‚Äî PROPOS√âE
// ------------------------------------------------------------------------------
// 1) DB : ajouter `role` √† `customers` + inclure `role` dans le JWT
// 2) Middlewares : authProtect + verifyAdmin sur TOUT /api/admin/*
// 3) /api/admin/orders : lecture seule (pagination, filtres, tri) ‚Äî contr√¥leur + service
// 4) /api/admin/products : CRUD complet c√¥t√© admin (s√©par√© du public)
// 5) /api/admin/variants/import : encapsuler la sync dans un service d√©di√©
// 6) Panneau ‚Äúanomalies d‚Äôimport‚Äù & ‚Äúlogs‚Äù (qualit√© de donn√©es / suivi des erreurs)
// 7) Paniers abandonn√©s : endpoint + vue admin
// 8) Rate-limit/timeout + helmet/compression + readiness
// ==============================================================================

// ==============================================================================
// üß™ SNIPPETS D‚ÄôEXEMPLE (√Ä COLLER LORS DE L‚ÄôIMPL√âMENTATION)
// ------------------------------------------------------------------------------

// Exemple de route admin prot√©g√©e (orders)
// routes/adminOrdersRoutes.js
/*
import express from 'express';
import { authProtect } from '../middlewares/authProtect.js';
import { verifyAdmin } from '../middlewares/verifyAdmin.js';
import {
  listOrders, getOrder, getOrderItems, updateOrderStatus, deleteOrder
} from '../controllers/admin/ordersAdminController.js';

const router = express.Router();
router.use(authProtect, verifyAdmin);

router.get('/orders', listOrders);
router.get('/orders/:id', getOrder);
router.get('/orders/:id/items', getOrderItems);
router.patch('/orders/:id/status', updateOrderStatus);
router.delete('/orders/:id', deleteOrder);

export default router;
*/

// Exemple d‚Äôapplication dans app.js
/*
import adminOrdersRoutes from './routes/adminOrdersRoutes.js';
app.use('/api/admin', adminOrdersRoutes);
*/
// ==============================================================================

// ==============================================================================
// üßæ HISTORIQUE DES OBSERVATIONS (2025-09-22)
// ------------------------------------------------------------------------------
// - Migration app/server + routes d√©di√©es : OK
// - Webhook Stripe ‚Äústrict metadata‚Äù : OK (idempotence + order_items propres)
// - Shipping rates : accepte long/court ID, mapping DB avant appel Printful : OK
// - Logger central + error handler : OK
// - Cron (sync statuts Printful + purge logs) externalis√©s : OK
// - Front : endpoints corrig√©s + contrats items/shipping_rate align√©s
// - Ajouts √† venir track√©s : abandoned carts, index DB, rate-limit/timeout, hardening, observabilit√©.
// ==============================================================================
